/**
 *
 *  Device Handler for a MiLight/LimitlessLED/EasyBulb RGBW light bulb (via AutoRemote)
 *  https://github.com/racarmichael/MiLight
 *  
 *  Special thanks to @joshualyon from SharpTools for the code from the original "AutoRemote DTH"
 *  https://gist.github.com/joshualyon/bd6a42c07715bb24db0a31812d4391ad
 *
 *  Also a thank you to the SmartThings community for the "Simulated RGBW Bulb" DTH
 *  https://github.com/SmartThingsCommunity/SmartThingsPublic/tree/master/devicetypes/smartthings/testing/simulated-rgbw-bulb.src
 *
 */
import groovy.transform.Field

// really? colorUtils is missing black?
@Field final Map      BLACK = [name: "Black", rgb: "#000000", h: 0, s: 0, l: 0]

@Field final IntRange PERCENT_RANGE = (0..100)

@Field final IntRange HUE_RANGE = PERCENT_RANGE
@Field final Integer  HUE_STEP = 5
@Field final IntRange SAT_RANGE = PERCENT_RANGE
@Field final Integer  SAT_STEP = 20
@Field final Integer  HUE_SCALE = 1000
@Field final Integer  COLOR_OFFSET = HUE_RANGE.getTo() * HUE_SCALE

@Field final IntRange COLOR_TEMP_RANGE = (2200..7000)
@Field final Integer  COLOR_TEMP_DEFAULT = COLOR_TEMP_RANGE.getFrom() + ((COLOR_TEMP_RANGE.getTo() - COLOR_TEMP_RANGE.getFrom())/2)
@Field final Integer  COLOR_TEMP_STEP = 50 // Kelvin
@Field final List     COLOR_TEMP_EXTRAS = []
@Field final List     COLOR_TEMP_LIST = buildColorTempList(COLOR_TEMP_RANGE, COLOR_TEMP_STEP, COLOR_TEMP_EXTRAS)

@Field final Map MODE = [
    COLOR:	"Color",
    WHITE:	"White",
    OFF: 	"Off"
]

metadata {
    definition (name: "MiLight AR Bulb", namespace: "racarmichael", author: "Ryan Carmichael", ocfDeviceType: "oic.d.light") {
        capability "Health Check"
        capability "Actuator"
        capability "Sensor"
        capability "Light"

        capability "Switch"
        capability "Switch Level"
        capability "Color Control"
        capability "Color Temperature"
        capability "Refresh"
        capability "Configuration"

        attribute  "colorTemperatureRange", "VECTOR3"

        attribute  "bulbMode", "ENUM", ["Color", "White", "Off"]
        attribute  "bulbValue", "STRING"
        attribute  "colorIndicator", "NUMBER"
        command    "simulateBulbState"

        command    "markDeviceOnline"
        command    "markDeviceOffline"
        command    "statusOn"
        command    "statusOff"
        command    "sendCommand", ["string"]
        command    "sendCommandMessage", ["string", "string"]
        
        preferences {
            input(name: "deviceIP", type: "string", title:"AutoRemote Device IP Address", description: "", required: true, displayDuringSetup: true)
            input(name: "customCommand", type: "string", title:"Device Name", description: "ex: {Group}_{DeviceName}=:=0000", displayDuringSetup: true)
            input(name: "groupNum", type: "string", title:"Group Number", description: "ex: 1,2,3, or 4 - 0 for all", displayDuringSetup: true)
        }
    }

    // UI tile definitions
    tiles(scale: 2) {
        multiAttributeTile(name:"switch", type: "lighting", width: 6, height: 4, canChangeIcon: true){
            tileAttribute ("device.switch", key: "PRIMARY_CONTROL") {
                attributeState "on", label:'${name}', action:"switch.off", icon:"st.switches.light.on", backgroundColor:"#00A0DC", nextState:"turningOff"
                attributeState "off", label:'${name}', action:"switch.on", icon:"st.switches.light.off", backgroundColor:"#FFFFFF", nextState:"turningOn"
                attributeState "turningOn", label:'Turning On', icon:"st.switches.light.off", backgroundColor:"#FFFFFF", nextState:"on"
                attributeState "turningOff", label:'Turning Off', icon:"st.switches.light.on", backgroundColor:"#00A0DC", nextState:"off"
            }
            tileAttribute ("device.level", key: "SLIDER_CONTROL") {
                attributeState "level", action: "setLevel"
            }
            tileAttribute ("device.color", key: "COLOR_CONTROL") {
                attributeState "color", action: "setColor"
            }
            tileAttribute ("device.bulbMode", key: "SECONDARY_CONTROL") {
                attributeState "Off", label: '${name}', defaultState: true
                attributeState "White", label: '${name}\nmode'
                attributeState "Color", label: '${name}\nmode'
            }
        }

        valueTile("colorIndicator", "device.colorIndicator", width: 4, height: 2) {
            state("colorIndicator", label: 'Virtual Bulb',
                    // value is simply the color temp in kelvin for color temperature
                    // for color, value is an offset plus the saturation pct plus the  hue pct * 1000
                    // Hues are represented evey 5% from 0-100
                    // Saturations are represented every 20% from 0-100
                    backgroundColors: [
                        [value: 0,      color: "#000000"],  // Black under 1000K
                        [value: 1000,   color: "#FF4300"],  // 1000K				// begin white color temperature
                        [value: 1500,   color: "#FF6C00"],  // 1500K
                        [value: 2000,   color: "#FF880D"],  // 2000K
                        [value: 2200,   color: "#FF9227"],  // 2200K
                        [value: 2500,   color: "#FF9F46"],  // 2500K
                        [value: 2700,   color: "#FFA657"],  // 2700K
                        [value: 3000,   color: "#FFB16D"],  // 3000K
                        [value: 3500,   color: "#FFC08C"],  // 3500K
                        [value: 4000,   color: "#FFCDA6"],  // 4000K
                        [value: 4500,   color: "#FFD9BB"],  // 4500K
                        [value: 5000,   color: "#FFE4CD"],  // 5000K
                        [value: 5500,   color: "#FFEDDE"],  // 5500K
                        [value: 6000,   color: "#FFF6EC"],  // 6000K
                        [value: 6500,   color: "#FFFEFA"],  // 6500K
                        [value: 7000,   color: "#F2F2FF"],  // 7000K
                        [value: 7500,   color: "#E5EAFF"],  // 7500K
                        [value: 8000,   color: "#DDE5FF"],  // 8000K
                        [value: 8500,   color: "#D6E1FF"],  // 8500K
                        [value: 9000,   color: "#D1DEFF"],  // 9000K
                        [value: 9500,   color: "#CDDCFF"],  // 9500K
                        [value: 10000,  color: "#C9DAFF"],  // 10000K
                        [value: 15000,  color: "#B5CDFF"],  // 15000K
                        [value: 20000,  color: "#AAC6FF"],  // 20000K
                        [value: 25000,  color: "#A3C1FF"],  // 25000K
                        [value: 30000,  color: "#9EBEFF"],  // 30000K
                        [value: 35000,  color: "#9ABBFF"],  // 35000K
                        [value: 40000,  color: "#97B9FF"],  // 40000K
                        [value: 100000, color: "#FFFFFF"],  // hue: 0, 	 sat: 0		// Begin color
                        [value: 100020, color: "#FFCCCC"],  // hue: 0, 	 sat: 20
                        [value: 100040, color: "#FF9999"],  // hue: 0, 	 sat: 40
                        [value: 100060, color: "#FF6666"],  // hue: 0, 	 sat: 60
                        [value: 100080, color: "#FF3333"],  // hue: 0, 	 sat: 80
                        [value: 100100, color: "#FF0000"],  // hue: 0, 	 sat: 100
                        [value: 105000, color: "#FFFFFF"],  // hue: 5, 	 sat: 0
                        [value: 105020, color: "#FFDBCC"],  // hue: 5, 	 sat: 20
                        [value: 105040, color: "#FFB899"],  // hue: 5, 	 sat: 40
                        [value: 105060, color: "#FF9466"],  // hue: 5, 	 sat: 60
                        [value: 105080, color: "#FF7033"],  // hue: 5, 	 sat: 80
                        [value: 105100, color: "#FF4D00"],  // hue: 5, 	 sat: 100
                        [value: 110000, color: "#FFFFFF"],  // hue: 10,  sat: 0
                        [value: 110020, color: "#FFEBCC"],  // hue: 10,  sat: 20
                        [value: 110040, color: "#FFD699"],  // hue: 10,  sat: 40
                        [value: 110060, color: "#FFC266"],  // hue: 10,  sat: 60
                        [value: 110080, color: "#FFAD33"],  // hue: 10,  sat: 80
                        [value: 110100, color: "#FF9900"],  // hue: 10,  sat: 100
                        [value: 115000, color: "#FFFFFF"],  // hue: 15,  sat: 0
                        [value: 115020, color: "#FFFACC"],  // hue: 15,  sat: 20
                        [value: 115040, color: "#FFF599"],  // hue: 15,  sat: 40
                        [value: 115060, color: "#FFF066"],  // hue: 15,  sat: 60
                        [value: 115080, color: "#FFEB33"],  // hue: 15,  sat: 80
                        [value: 115100, color: "#FFE600"],  // hue: 15,  sat: 100
                        [value: 120000, color: "#FFFFFF"],  // hue: 20,  sat: 0
                        [value: 120020, color: "#F5FFCC"],  // hue: 20,  sat: 20
                        [value: 120040, color: "#EBFF99"],  // hue: 20,  sat: 40
                        [value: 120060, color: "#E0FF66"],  // hue: 20,  sat: 60
                        [value: 120080, color: "#D6FF33"],  // hue: 20,  sat: 80
                        [value: 120100, color: "#CCFF00"],  // hue: 20,  sat: 100
                        [value: 125000, color: "#FFFFFF"],  // hue: 25,  sat: 0
                        [value: 125020, color: "#E6FFCC"],  // hue: 25,  sat: 20
                        [value: 125040, color: "#CCFF99"],  // hue: 25,  sat: 40
                        [value: 125060, color: "#B3FF66"],  // hue: 25,  sat: 60
                        [value: 125080, color: "#99FF33"],  // hue: 25,  sat: 80
                        [value: 125100, color: "#80FF00"],  // hue: 25,  sat: 100
                        [value: 130000, color: "#FFFFFF"],  // hue: 30,  sat: 0
                        [value: 130020, color: "#D6FFCC"],  // hue: 30,  sat: 20
                        [value: 130040, color: "#ADFF99"],  // hue: 30,  sat: 40
                        [value: 130060, color: "#85FF66"],  // hue: 30,  sat: 60
                        [value: 130080, color: "#5CFF33"],  // hue: 30,  sat: 80
                        [value: 130100, color: "#33FF00"],  // hue: 30,  sat: 100
                        [value: 135000, color: "#FFFFFF"],  // hue: 35,  sat: 0
                        [value: 135020, color: "#CCFFD1"],  // hue: 35,  sat: 20
                        [value: 135040, color: "#99FFA3"],  // hue: 35,  sat: 40
                        [value: 135060, color: "#66FF75"],  // hue: 35,  sat: 60
                        [value: 135080, color: "#33FF47"],  // hue: 35,  sat: 80
                        [value: 135100, color: "#00FF19"],  // hue: 35,  sat: 100
                        [value: 140000, color: "#FFFFFF"],  // hue: 40,  sat: 0
                        [value: 140020, color: "#CCFFE0"],  // hue: 40,  sat: 20
                        [value: 140040, color: "#99FFC2"],  // hue: 40,  sat: 40
                        [value: 140060, color: "#66FFA3"],  // hue: 40,  sat: 60
                        [value: 140080, color: "#33FF85"],  // hue: 40,  sat: 80
                        [value: 140100, color: "#00FF66"],  // hue: 40,  sat: 100
                        [value: 145000, color: "#FFFFFF"],  // hue: 45,  sat: 0
                        [value: 145020, color: "#CCFFF0"],  // hue: 45,  sat: 20
                        [value: 145040, color: "#99FFE0"],  // hue: 45,  sat: 40
                        [value: 145060, color: "#66FFD1"],  // hue: 45,  sat: 60
                        [value: 145080, color: "#33FFC2"],  // hue: 45,  sat: 80
                        [value: 145100, color: "#00FFB2"],  // hue: 45,  sat: 100
                        [value: 150000, color: "#FFFFFF"],  // hue: 50,  sat: 0
                        [value: 150020, color: "#CCFFFF"],  // hue: 50,  sat: 20
                        [value: 150040, color: "#99FFFF"],  // hue: 50,  sat: 40
                        [value: 150060, color: "#66FFFF"],  // hue: 50,  sat: 60
                        [value: 150080, color: "#33FFFF"],  // hue: 50,  sat: 80
                        [value: 150100, color: "#00FFFF"],  // hue: 50,  sat: 100
                        [value: 155000, color: "#FFFFFF"],  // hue: 55,  sat: 0
                        [value: 155020, color: "#CCF0FF"],  // hue: 55,  sat: 20
                        [value: 155040, color: "#99E0FF"],  // hue: 55,  sat: 40
                        [value: 155060, color: "#66D1FF"],  // hue: 55,  sat: 60
                        [value: 155080, color: "#33C2FF"],  // hue: 55,  sat: 80
                        [value: 155100, color: "#00B2FF"],  // hue: 55,  sat: 100
                        [value: 160000, color: "#FFFFFF"],  // hue: 60,  sat: 0
                        [value: 160020, color: "#CCE0FF"],  // hue: 60,  sat: 20
                        [value: 160040, color: "#99C2FF"],  // hue: 60,  sat: 40
                        [value: 160060, color: "#66A3FF"],  // hue: 60,  sat: 60
                        [value: 160080, color: "#3385FF"],  // hue: 60,  sat: 80
                        [value: 160100, color: "#0066FF"],  // hue: 60,  sat: 100
                        [value: 165000, color: "#FFFFFF"],  // hue: 65,  sat: 0
                        [value: 165020, color: "#CCD1FF"],  // hue: 65,  sat: 20
                        [value: 165040, color: "#99A3FF"],  // hue: 65,  sat: 40
                        [value: 165060, color: "#6675FF"],  // hue: 65,  sat: 60
                        [value: 165080, color: "#3347FF"],  // hue: 65,  sat: 80
                        [value: 165100, color: "#001AFF"],  // hue: 65,  sat: 100
                        [value: 170000, color: "#FFFFFF"],  // hue: 70,  sat: 0
                        [value: 170020, color: "#D6CCFF"],  // hue: 70,  sat: 20
                        [value: 170040, color: "#AD99FF"],  // hue: 70,  sat: 40
                        [value: 170060, color: "#8566FF"],  // hue: 70,  sat: 60
                        [value: 170080, color: "#5C33FF"],  // hue: 70,  sat: 80
                        [value: 170100, color: "#3300FF"],  // hue: 70,  sat: 100
                        [value: 175000, color: "#FFFFFF"],  // hue: 75,  sat: 0
                        [value: 175020, color: "#E6CCFF"],  // hue: 75,  sat: 20
                        [value: 175040, color: "#CC99FF"],  // hue: 75,  sat: 40
                        [value: 175060, color: "#B366FF"],  // hue: 75,  sat: 60
                        [value: 175080, color: "#9933FF"],  // hue: 75,  sat: 80
                        [value: 175100, color: "#8000FF"],  // hue: 75,  sat: 100
                        [value: 180000, color: "#FFFFFF"],  // hue: 80,  sat: 0
                        [value: 180020, color: "#F5CCFF"],  // hue: 80,  sat: 20
                        [value: 180040, color: "#EB99FF"],  // hue: 80,  sat: 40
                        [value: 180060, color: "#E066FF"],  // hue: 80,  sat: 60
                        [value: 180080, color: "#D633FF"],  // hue: 80,  sat: 80
                        [value: 180100, color: "#CC00FF"],  // hue: 80,  sat: 100
                        [value: 185000, color: "#FFFFFF"],  // hue: 85,  sat: 0
                        [value: 185020, color: "#FFCCFA"],  // hue: 85,  sat: 20
                        [value: 185040, color: "#FF99F5"],  // hue: 85,  sat: 40
                        [value: 185060, color: "#FF66F0"],  // hue: 85,  sat: 60
                        [value: 185080, color: "#FF33EB"],  // hue: 85,  sat: 80
                        [value: 185100, color: "#FF00E5"],  // hue: 85,  sat: 100
                        [value: 190000, color: "#FFFFFF"],  // hue: 90,  sat: 0
                        [value: 190020, color: "#FFCCEB"],  // hue: 90,  sat: 20
                        [value: 190040, color: "#FF99D6"],  // hue: 90,  sat: 40
                        [value: 190060, color: "#FF66C2"],  // hue: 90,  sat: 60
                        [value: 190080, color: "#FF33AD"],  // hue: 90,  sat: 80
                        [value: 190100, color: "#FF0099"],  // hue: 90,  sat: 100
                        [value: 195000, color: "#FFFFFF"],  // hue: 95,  sat: 0
                        [value: 195020, color: "#FFCCDB"],  // hue: 95,  sat: 20
                        [value: 195040, color: "#FF99B8"],  // hue: 95,  sat: 40
                        [value: 195060, color: "#FF6694"],  // hue: 95,  sat: 60
                        [value: 195080, color: "#FF3370"],  // hue: 95,  sat: 80
                        [value: 195100, color: "#FF004D"],  // hue: 95,  sat: 100
                        [value: 200000, color: "#000000"]   // hue: 100, sat: 100	// Out of bound high rendered as black
                    ]
            )
        }

        valueTile("colorTempControlLabel", "device.colorTemperature", inactiveLabel: false, decoration: "flat", width: 2, height: 1) {
            state "default", label: 'White Color Temp.\n${currentValue}K'
        }

        controlTile("colorTempSliderControl", "device.colorTemperature", "slider", width: 4, height: 1, inactiveLabel: false, range: "(2200..7000)") {
            state "colorTemperature", action: "setColorTemperature"
        }

        valueTile("bulbValue", "bulbValue", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
            state "bulbValue", label: '${currentValue}'
        }

        standardTile("refresh", "device.switch", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
            state "default", label: "", action: "refresh", icon: "st.secondary.refresh"
        }

        valueTile("reset", "device.switch", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
            state "default", label: "Reset", action: "configure"
        }

        standardTile("deviceHealthControl", "device.healthStatus", decoration: "flat", width: 2, height: 2, inactiveLabel: false) {
            state "online",  label: "ONLINE", backgroundColor: "#00A0DC", action: "markDeviceOffline", icon: "st.Health & Wellness.health9", nextState: "goingOffline", defaultState: true
            state "offline", label: "OFFLINE", backgroundColor: "#E86D13", action: "markDeviceOnline", icon: "st.Health & Wellness.health9", nextState: "goingOnline"
            state "goingOnline", label: "Going ONLINE", backgroundColor: "#FFFFFF", icon: "st.Health & Wellness.health9"
            state "goingOffline", label: "Going OFFLINE", backgroundColor: "#FFFFFF", icon: "st.Health & Wellness.health9"
        }

        main(["switch"])
        details(["switch", "colorTempControlLabel", "colorTempSliderControl", "bulbValue", "colorIndicator", "refresh", "deviceHealthControl", "reset"])
    }
}

//
// interface methods
//

// parse events into attributes
def parse(String description) {
    log.trace "Executing 'parse' $description"
    def parsedEvents
    def pair = description?.split(":")
    if (!pair || pair.length < 2) {
        log.warn "parse() could not extract an event name and value from '$description'"
    } else {
        String name = pair[0]?.trim()
        if (name) {
            name = name.replaceAll(~/\W/, "_").replaceAll(~/_{2,}?/, "_")
        }
        parsedEvents = createEvent(name: name, value: pair[1]?.trim())
    }
    done()
    return parsedEvents
}

def installed() {
    log.trace "Executing 'installed'"
    configure()
}

def updated() {
    log.trace "Executing 'updated'"
    initialize()
}

//
// command methods
//

def refresh() {
    log.trace "Executing 'refresh'"
    String currentMode = device.currentValue("bulbMode")
    if (!MODE.containsValue(currentMode)) {
        initialize()
    } else {
        simulateBulbState(currentMode)
    }
}

def configure() {
    log.trace "Executing 'configure'"
    // this would be for a physical device when it gets a handler assigned to it

    // for HealthCheck
    sendEvent(name: "DeviceWatch-Enroll", value: [protocol: "cloud", scheme:"untracked"].encodeAsJson(), displayed: false)
    markDeviceOnline()

    initialize()
}

def on() {
    log.trace "Executing 'on'"
    
         if (groupNum == "1") sendCustomCommand("4500")
    else if (groupNum == "2") sendCustomCommand("4700")
    else if (groupNum == "3") sendCustomCommand("4900")
    else if (groupNum == "4") sendCustomCommand("4B00")
    else    sendCustomCommand("4200") //ALL GROUPS
    
    sendEvent(name: "switch", value: "turningOn")
    
    
    turnOn()
    simulateBulbState(state.lastMode)
    done()  
}

def off() {
    log.trace "Executing 'off'"
    
         if (groupNum == "1") sendCustomCommand("4600")
    else if (groupNum == "2") sendCustomCommand("4800")
    else if (groupNum == "3") sendCustomCommand("4A00")
    else if (groupNum == "4") sendCustomCommand("4C00")
    else    sendCustomCommand("4100") //ALL GROUPS
    
    sendEvent(name: "switch", value: "turningOff")
    
    
    turnOff()
    simulateBulbState(MODE.OFF)
    done()
}

def sendCommand(command){
    log.debug "Sending command: ${command}"
    sendARCommand(command)
}

def sendCommandMessage(command, message){
    log.debug "Sending command with message: ${command}=:=${message}"
    sendARCommand("${command}=:=${message}")
}

def sendCustomCommand(command){
    log.debug "Sending default custom command: ${customCommand}=:=${command}"
    
    sendARCommand("GR${groupNum}_${customCommand}=:=${command}")
    
}

def sendARCommand(command){
	if(isHubitat){
        //Hubitat approach
        def params = ["uri": "http://${deviceIP}:1817/?message=${command}"]
        def data = ["command": command]
        asynchttpGet(hubitatCallback, params, data)
        log.debug "Sent async HTTP get"
    }
    
    //SmartThings Approach
    def result = new physicalgraph.device.HubAction(
        method: "GET", 
        path: "/?message=${command}", 
        headers: [ HOST: "${deviceIP}:1817"], 
        null, 
        [callback: smartthingsCallback]
    )
    log.debug "Sending HTTP GET..."
    sendHubCommand(result) 
}

def smartthingsCallback(response){
	log.debug "AutoRemote HTTP GET Response is: ${response.body}"
}

def hubitatCallback(response, data){
    log.debug "Request to turn ${data['command']} ${response.hasError() ? 'FAILED' : 'SUCCEEDED'} with status ${response.getStatus()}"
}

def getIsHubitat(){
	return false; //hardcode it for now - we can make it dynamic and merge the SmartThings DTH and Hubitat driver together
}

def setLevel(levelPercent, rate = null) {
    Integer boundedPercent = boundInt(levelPercent, PERCENT_RANGE)
    log.trace "executing 'setLevel' ${boundedPercent}%"
    def effectiveMode = device.currentValue("bulbMode")
    if (boundedPercent > 0) { // just not if the brightness is set to zero
        implicitOn()
        sendEvent(name: "level", value: boundedPercent)
        
                    if (boundedPercent == 0) wait(1) //DO NOTHING
            else if (boundedPercent < 8) sendCustomCommand("4E02")
            else if (boundedPercent < 12) sendCustomCommand("4E03")
            else if (boundedPercent < 16) sendCustomCommand("4E04")
            else if (boundedPercent < 20) sendCustomCommand("4E05")
            else if (boundedPercent < 23) sendCustomCommand("4E06")
            else if (boundedPercent < 27) sendCustomCommand("4E07")
            else if (boundedPercent < 31) sendCustomCommand("4E08")
            else if (boundedPercent < 34) sendCustomCommand("4E09")
            else if (boundedPercent < 38) sendCustomCommand("4E0A")
            else if (boundedPercent < 42) sendCustomCommand("4E0B")
            else if (boundedPercent < 45) sendCustomCommand("4E0C")
            else if (boundedPercent < 49) sendCustomCommand("4E0D")
            else if (boundedPercent < 53) sendCustomCommand("4E0E")
            else if (boundedPercent < 57) sendCustomCommand("4E0F")
            else if (boundedPercent < 60) sendCustomCommand("4E10")
            else if (boundedPercent < 64) sendCustomCommand("4E11")
            else if (boundedPercent < 68) sendCustomCommand("4E12")
            else if (boundedPercent < 71) sendCustomCommand("4E13")
            else if (boundedPercent < 75) sendCustomCommand("4E14")
            else if (boundedPercent < 79) sendCustomCommand("4E15")
            else if (boundedPercent < 82) sendCustomCommand("4E16")
            else if (boundedPercent < 86) sendCustomCommand("4E17")
            else if (boundedPercent < 90) sendCustomCommand("4E18")
            else if (boundedPercent < 94) sendCustomCommand("4E19")
            else if (boundedPercent < 97) sendCustomCommand("4E1A")
            else if (boundedPercent > 96) sendCustomCommand("4E1B")
    } else {
        // setting the level to 0% is turning it off, but we don't actually set the level to 0%
        turnOff()
        effectiveMode = MODE.OFF
    }
    simulateBulbState(effectiveMode)
    done()
}

def setColorTemperature(kelvin) {
    Integer kelvinNorm = snapToClosest(kelvin, COLOR_TEMP_LIST)
    log.trace "executing 'setColorTemperature' ${kelvinNorm}K (was ${kelvin}K)"
    implicitOn()
    sendEvent(name: "colorTemperature", value: kelvinNorm)
    simulateBulbState(MODE.WHITE)
    done()
}

def setSaturation(saturationPercent) {
    log.trace "Executing 'setSaturation' ${saturationPercent}/100"
    Integer currentHue = device.currentValue("hue")
    setColor(currentHue, saturationPercent)
    // setColor will call done() for us
}

def setHue(huePercent) {
    log.trace "Executing 'setHue' ${huePercent}/100"
    Integer currentSaturation = device.currentValue("saturation")
    setColor(huePercent, currentSaturation)
    // setColor will call done() for us
}

/**
 * setColor variant accepting discrete hue and saturation percentages
 * @param Integer huePercent            percentace of hue 0-100
 * @param Integer saturationPercent     percentage of saturtion 0-100
 */
def setColor(Integer huePercent, Integer saturationPercent) {
    log.trace "Executing 'setColor' from separate values hue: $huePercent, saturation: $saturationPercent"
    Map colorHSMap = buildColorHSMap(huePercent, saturationPercent)
    setColor(colorHSMap) // call the capability version method overload
}

/**
 * setColor overload which accepts a hex RGB string
 * @param String hex    RGB color donoted as a hex string in format #1F1F1F
 */
def setColor(String rgbHex) {
    log.trace "Executing 'setColor' from hex $rgbHex"
    if (hex == "#000000") {
        // setting to black? turn it off.
        off()
    } else {
        List hsvList = colorUtil.hexToHsv(rgbHex)
        Map colorHSMap = buildColorHSMap(hsvList[0], hsvList[1])
        setColor(colorHSMap) // call the capability version method overload
    }
    
}

/**
 * setColor as defined by the Color Control capability
 * even if we had a hex RGB value before, we convert back to it from hue and sat percentages
 * @param colorHSMap
 */
def setColor(Map colorHSMap) {
    log.trace "Executing 'setColor' $colorHSMap"
    Integer boundedHue = boundInt(colorHSMap?.hue?:0, PERCENT_RANGE)
    Integer boundedSaturation = boundInt(colorHSMap?.saturation?:0, PERCENT_RANGE)
    String rgbHex = colorUtil.hsvToHex(boundedHue, boundedSaturation)
    log.debug "bounded hue and saturation: $boundedHue, $boundedSaturation; hex conversion: $rgbHex"
    implicitOn()
    sendEvent(name: "hue", value: boundedHue)
    sendEvent(name: "saturation", value: boundedSaturation)
    sendEvent(name: "color", value: rgbHex)
    simulateBulbState(MODE.COLOR)
    done()
}

def markDeviceOnline() {
    setDeviceHealth("online")
}

def markDeviceOffline() {
    setDeviceHealth("offline")
}

def statusOn(){
    log.debug "Updating the status to 'on' without sending network command"
    on(false)
}

def statusOff(){
    log.debug "Updating the status to 'off' without sending network command"
    off(false)
}

private setDeviceHealth(String healthState) {
    log.debug("healthStatus: ${device.currentValue('healthStatus')}; DeviceWatch-DeviceStatus: ${device.currentValue('DeviceWatch-DeviceStatus')}")
    // ensure healthState is valid
    List validHealthStates = ["online", "offline"]
    healthState = validHealthStates.contains(healthState) ? healthState : device.currentValue("healthStatus")
    // set the healthState
    sendEvent(name: "DeviceWatch-DeviceStatus", value: healthState)
    sendEvent(name: "healthStatus", value: healthState)
}

private initialize() {
    log.trace "Executing 'initialize'"

    sendEvent(name: "colorTemperatureRange", value: COLOR_TEMP_RANGE)
    sendEvent(name: "colorTemperature", value: COLOR_TEMP_DEFAULT)

    sendEvent(name: "hue", value: BLACK.h)
    sendEvent(name: "saturation", value: BLACK.s)
    // make sure to set color attribute!
    sendEvent(name: "color", value: BLACK.rgb)

    sendEvent(name: "level", value: 100)

    sendEvent(name: "switch", value: "off")
    state.lastMode = MODE.COLOR
    simulateBulbState(MODE.OFF)
    done()
}

/**
 * Turns device on if it is not already on
 */
private implicitOn() {
    if (device.currentValue("switch") != "on") {
        turnOn()
    }
}

/**
 * no-frills turn-on, no log, no simulation
 */
private turnOn() {
    sendEvent(name: "switch", value: "on")
}

/**
 * no-frills turn-off, no log, no simulation
 */
private turnOff() {
    sendEvent(name: "switch", value: "off")
}

private Map buildColorHSMap(hue, saturation) {
    Map colorHSMap = [hue: 0, saturation: 0]
    try {
        colorHSMap.hue = hue.toFloat().toInteger()
        colorHSMap.saturation = saturation.toFloat().toInteger()
    } catch (NumberFormatException nfe) {
        log.warn "Couldn't transform one of hue ($hue) or saturation ($saturation) to integers: $nfe"
    }
    return colorHSMap
}

/**
 * Call this after all events setting attributes have been sent to simulate the bulb's state
 * @param mode  a member of the MODE constant map
 */
private void simulateBulbState(String mode) {
    log.trace "Executing 'simulateBulbState' $mode"
    String valueText = "---"
    String rgbHex = BLACK.rgb
    Integer colorIndicator = 0
    switch (mode) {
        case MODE.COLOR:
            Integer huePct = device?.currentValue("hue")?:0
            Integer saturationPct = device?.currentValue("saturation")?:0
            colorIndicator = flattenHueSat(huePct, saturationPct) // flattened, scaled & offset hue & sat
            rgbHex = colorUtil.hsvToHex(huePct, saturationPct)
            valueText = "$mode\n$rgbHex"
            state.lastMode = mode
            break;
        case MODE.WHITE:
            Integer kelvin = device?.currentValue("colorTemperature")?:0
            colorIndicator = kelvin  // for tunable white, just use the color temperature
            rgbHex = kelvinToHex(kelvin)
            valueText = "$mode\n${kelvin}K"
            state.lastMode = mode
            break;
        case MODE.OFF:
        default:
            mode = MODE.OFF
            valueText = mode
            // don't set state lastMode for Off
            break;
    }
    log.debug "bulbMode: $mode; bulbValue: $valueText; colorIndicator: $colorIndicator"
    sendEvent(name: "colorIndicator", value: colorIndicator)
    sendEvent(name: "bulbMode", value: mode)
    sendEvent(name: "bulbValue", value: valueText)    
    
    if (colorIndicator == 0) wait(1) //DO NOTHING
    
    //WHITE
    else if (colorIndicator < 99999 && groupNum == "1") sendCustomCommand("C500") 
    else if (colorIndicator < 99999 && groupNum == "2") sendCustomCommand("C700")
    else if (colorIndicator < 99999 && groupNum == "3") sendCustomCommand("C900")
    else if (colorIndicator < 99999 && groupNum == "4") sendCustomCommand("CB00")
    else if (colorIndicator < 99999) sendCustomCommand("C200") //ALL GROUPS
    
    else if (colorIndicator < 101100) sendCustomCommand("40AF")
    else if (colorIndicator < 102050) sendCustomCommand("40AE")
    else if (colorIndicator < 102100) sendCustomCommand("40AD")
    else if (colorIndicator < 103100) sendCustomCommand("40AC")
    else if (colorIndicator < 104050) sendCustomCommand("40AB")
    else if (colorIndicator < 104100) sendCustomCommand("40AA")
    else if (colorIndicator < 105100) sendCustomCommand("40A9")
    else if (colorIndicator < 106050) sendCustomCommand("40A8")
    else if (colorIndicator < 106100) sendCustomCommand("40A7")
    else if (colorIndicator < 107100) sendCustomCommand("40A6")
    else if (colorIndicator < 108050) sendCustomCommand("40A5")
    else if (colorIndicator < 108100) sendCustomCommand("40A4")
    else if (colorIndicator < 109100) sendCustomCommand("40A3")
    else if (colorIndicator < 110050) sendCustomCommand("40A2")
    else if (colorIndicator < 110100) sendCustomCommand("40A1")
    else if (colorIndicator < 111050) sendCustomCommand("40A0")
    else if (colorIndicator < 111100) sendCustomCommand("409F")
    else if (colorIndicator < 112020) sendCustomCommand("409E")
    else if (colorIndicator < 112040) sendCustomCommand("409D")
    else if (colorIndicator < 112060) sendCustomCommand("409C")
    else if (colorIndicator < 112080) sendCustomCommand("409B")
    else if (colorIndicator < 112100) sendCustomCommand("409A")
    else if (colorIndicator < 113025) sendCustomCommand("4099")
    else if (colorIndicator < 113050) sendCustomCommand("4098")
    else if (colorIndicator < 113075) sendCustomCommand("4097")
    else if (colorIndicator < 113100) sendCustomCommand("4096")
    else if (colorIndicator < 114025) sendCustomCommand("4095")
    else if (colorIndicator < 114050) sendCustomCommand("4094")
    else if (colorIndicator < 114075) sendCustomCommand("4093")
    else if (colorIndicator < 114100) sendCustomCommand("4092")
    else if (colorIndicator < 115015) sendCustomCommand("4091")
    else if (colorIndicator < 115030) sendCustomCommand("4090")
    else if (colorIndicator < 115045) sendCustomCommand("408F")
    else if (colorIndicator < 115060) sendCustomCommand("408E")
    else if (colorIndicator < 115085) sendCustomCommand("408D")
    else if (colorIndicator < 115100) sendCustomCommand("408C")
    else if (colorIndicator < 116030) sendCustomCommand("408B")
    else if (colorIndicator < 116040) sendCustomCommand("408A")
    else if (colorIndicator < 116050) sendCustomCommand("4089")
    else if (colorIndicator < 116060) sendCustomCommand("4088")
    else if (colorIndicator < 116070) sendCustomCommand("4087")
    else if (colorIndicator < 116080) sendCustomCommand("4086")
    else if (colorIndicator < 116090) sendCustomCommand("4085")
    else if (colorIndicator < 116100) sendCustomCommand("4084")
    else if (colorIndicator < 117025) sendCustomCommand("4083")
    else if (colorIndicator < 117050) sendCustomCommand("4082")
    else if (colorIndicator < 117075) sendCustomCommand("4081")
    else if (colorIndicator < 117100) sendCustomCommand("4080")
    else if (colorIndicator < 119100) sendCustomCommand("407F")
    else if (colorIndicator < 120100) sendCustomCommand("407E")
    else if (colorIndicator < 121100) sendCustomCommand("407D")
    else if (colorIndicator < 122100) sendCustomCommand("407C")
    else if (colorIndicator < 123100) sendCustomCommand("407B")
    else if (colorIndicator < 124100) sendCustomCommand("407A")
    else if (colorIndicator < 125100) sendCustomCommand("4079")
    else if (colorIndicator < 126100) sendCustomCommand("4078")
    else if (colorIndicator < 127100) sendCustomCommand("4077")
    else if (colorIndicator < 128100) sendCustomCommand("4076")
    else if (colorIndicator < 129100) sendCustomCommand("4075")
    else if (colorIndicator < 130100) sendCustomCommand("4074")
    else if (colorIndicator < 131100) sendCustomCommand("4073")
    else if (colorIndicator < 132100) sendCustomCommand("4072")
    else if (colorIndicator < 133100) sendCustomCommand("4071")
    else if (colorIndicator < 134100) sendCustomCommand("4070")
    else if (colorIndicator < 135015) sendCustomCommand("406F")
    else if (colorIndicator < 135030) sendCustomCommand("406E")
    else if (colorIndicator < 135045) sendCustomCommand("406D")
    else if (colorIndicator < 135060) sendCustomCommand("406C")
    else if (colorIndicator < 135085) sendCustomCommand("406B")
    else if (colorIndicator < 135100) sendCustomCommand("406A")
    else if (colorIndicator < 136020) sendCustomCommand("4069")
    else if (colorIndicator < 136040) sendCustomCommand("4068")
    else if (colorIndicator < 136060) sendCustomCommand("4067")
    else if (colorIndicator < 136080) sendCustomCommand("4066")
    else if (colorIndicator < 136100) sendCustomCommand("4065")
    else if (colorIndicator < 137020) sendCustomCommand("4064")
    else if (colorIndicator < 137040) sendCustomCommand("4063")
    else if (colorIndicator < 137060) sendCustomCommand("4062")
    else if (colorIndicator < 137080) sendCustomCommand("4061")
    else if (colorIndicator < 137100) sendCustomCommand("4060")
    else if (colorIndicator < 138030) sendCustomCommand("405F")
    else if (colorIndicator < 138060) sendCustomCommand("405E")
    else if (colorIndicator < 138100) sendCustomCommand("405D")
    else if (colorIndicator < 139030) sendCustomCommand("405C")
    else if (colorIndicator < 139060) sendCustomCommand("405B")
    else if (colorIndicator < 139100) sendCustomCommand("405A")
    else if (colorIndicator < 140025) sendCustomCommand("4059")
    else if (colorIndicator < 140050) sendCustomCommand("4058")
    else if (colorIndicator < 140075) sendCustomCommand("4057")
    else if (colorIndicator < 140100) sendCustomCommand("4056")
    else if (colorIndicator < 141025) sendCustomCommand("4055")
    else if (colorIndicator < 141050) sendCustomCommand("4054")
    else if (colorIndicator < 141075) sendCustomCommand("4053")
    else if (colorIndicator < 141100) sendCustomCommand("4052")
    else if (colorIndicator < 142025) sendCustomCommand("4051")
    else if (colorIndicator < 142050) sendCustomCommand("4050")
    else if (colorIndicator < 142075) sendCustomCommand("404F")
    else if (colorIndicator < 142100) sendCustomCommand("404E")
    else if (colorIndicator < 143015) sendCustomCommand("404D")
    else if (colorIndicator < 143030) sendCustomCommand("404C")
    else if (colorIndicator < 143045) sendCustomCommand("404B")
    else if (colorIndicator < 143060) sendCustomCommand("404A")
    else if (colorIndicator < 143085) sendCustomCommand("4049")
    else if (colorIndicator < 143100) sendCustomCommand("4048")
    else if (colorIndicator < 144015) sendCustomCommand("4047")
    else if (colorIndicator < 144030) sendCustomCommand("4046")
    else if (colorIndicator < 144045) sendCustomCommand("4045")
    else if (colorIndicator < 144060) sendCustomCommand("4044")
    else if (colorIndicator < 144085) sendCustomCommand("4043")
    else if (colorIndicator < 144100) sendCustomCommand("4042")
    else if (colorIndicator < 145050) sendCustomCommand("4041")
    else if (colorIndicator < 145100) sendCustomCommand("4040")
    else if (colorIndicator < 146030) sendCustomCommand("403F")
    else if (colorIndicator < 146060) sendCustomCommand("403E")
    else if (colorIndicator < 146100) sendCustomCommand("403D")
    else if (colorIndicator < 147050) sendCustomCommand("403C")
    else if (colorIndicator < 147100) sendCustomCommand("403B")
    else if (colorIndicator < 148030) sendCustomCommand("403A")
    else if (colorIndicator < 148060) sendCustomCommand("4039")
    else if (colorIndicator < 148100) sendCustomCommand("4038")
    else if (colorIndicator < 149030) sendCustomCommand("4037")
    else if (colorIndicator < 149060) sendCustomCommand("4036")
    else if (colorIndicator < 149100) sendCustomCommand("4035")
    else if (colorIndicator < 150050) sendCustomCommand("4034")
    else if (colorIndicator < 150100) sendCustomCommand("4033")
    else if (colorIndicator < 151030) sendCustomCommand("4032")
    else if (colorIndicator < 151060) sendCustomCommand("4031")
    else if (colorIndicator < 151100) sendCustomCommand("4030")
    else if (colorIndicator < 152100) sendCustomCommand("402F")
    else if (colorIndicator < 153050) sendCustomCommand("402E")
    else if (colorIndicator < 153100) sendCustomCommand("402D")
    else if (colorIndicator < 154050) sendCustomCommand("402C")
    else if (colorIndicator < 154100) sendCustomCommand("402B")
    else if (colorIndicator < 155050) sendCustomCommand("402A")
    else if (colorIndicator < 155100) sendCustomCommand("4029")
    else if (colorIndicator < 156050) sendCustomCommand("4028")
    else if (colorIndicator < 156100) sendCustomCommand("4027")
    else if (colorIndicator < 157050) sendCustomCommand("4026")
    else if (colorIndicator < 157100) sendCustomCommand("4025")
    else if (colorIndicator < 158050) sendCustomCommand("4024")
    else if (colorIndicator < 158100) sendCustomCommand("4023")
    else if (colorIndicator < 159050) sendCustomCommand("4022")
    else if (colorIndicator < 159100) sendCustomCommand("4021")
    else if (colorIndicator < 160100) sendCustomCommand("4020")
    else if (colorIndicator < 161050) sendCustomCommand("401F")
    else if (colorIndicator < 161100) sendCustomCommand("401E")
    else if (colorIndicator < 162030) sendCustomCommand("401D")
    else if (colorIndicator < 162060) sendCustomCommand("401C")
    else if (colorIndicator < 162100) sendCustomCommand("401B")
    else if (colorIndicator < 163050) sendCustomCommand("401A")
    else if (colorIndicator < 163100) sendCustomCommand("4019")
    else if (colorIndicator < 164050) sendCustomCommand("4018")
    else if (colorIndicator < 164100) sendCustomCommand("4017")
    else if (colorIndicator < 165050) sendCustomCommand("4016")
    else if (colorIndicator < 165100) sendCustomCommand("4015")
    else if (colorIndicator < 166030) sendCustomCommand("4014")
    else if (colorIndicator < 166060) sendCustomCommand("4013")
    else if (colorIndicator < 166100) sendCustomCommand("4012")
    else if (colorIndicator < 167050) sendCustomCommand("4011")
    else if (colorIndicator < 167100) sendCustomCommand("4010")
    else if (colorIndicator < 168020) sendCustomCommand("400F")
    else if (colorIndicator < 168040) sendCustomCommand("400E")
    else if (colorIndicator < 168060) sendCustomCommand("400D")
    else if (colorIndicator < 168080) sendCustomCommand("400C")
    else if (colorIndicator < 168100) sendCustomCommand("400B")
    else if (colorIndicator < 169015) sendCustomCommand("400A")
    else if (colorIndicator < 169030) sendCustomCommand("4009")
    else if (colorIndicator < 169055) sendCustomCommand("4008")
    else if (colorIndicator < 169070) sendCustomCommand("4007")
    else if (colorIndicator < 169085) sendCustomCommand("4006")
    else if (colorIndicator < 169100) sendCustomCommand("4005")
    else if (colorIndicator < 170020) sendCustomCommand("4004")
    else if (colorIndicator < 170040) sendCustomCommand("4003")
    else if (colorIndicator < 170060) sendCustomCommand("4002")
    else if (colorIndicator < 170080) sendCustomCommand("4001")
    else if (colorIndicator < 170100) sendCustomCommand("4000")
    else if (colorIndicator < 171050) sendCustomCommand("40FF")
    else if (colorIndicator < 171100) sendCustomCommand("40FE")
    else if (colorIndicator < 172030) sendCustomCommand("40FD")
    else if (colorIndicator < 172060) sendCustomCommand("40FC")
    else if (colorIndicator < 172100) sendCustomCommand("40FB")
    else if (colorIndicator < 173025) sendCustomCommand("40FA")
    else if (colorIndicator < 173050) sendCustomCommand("40F9")
    else if (colorIndicator < 173075) sendCustomCommand("40F8")
    else if (colorIndicator < 173100) sendCustomCommand("40F7")
    else if (colorIndicator < 174030) sendCustomCommand("40F6")
    else if (colorIndicator < 174060) sendCustomCommand("40F5")
    else if (colorIndicator < 174100) sendCustomCommand("40F4")
    else if (colorIndicator < 175030) sendCustomCommand("40F3")
    else if (colorIndicator < 175060) sendCustomCommand("40F2")
    else if (colorIndicator < 175100) sendCustomCommand("40F1")
    else if (colorIndicator < 176030) sendCustomCommand("40F0")
    else if (colorIndicator < 176060) sendCustomCommand("40EF")
    else if (colorIndicator < 176100) sendCustomCommand("40EE")
    else if (colorIndicator < 177020) sendCustomCommand("40ED")
    else if (colorIndicator < 177040) sendCustomCommand("40EC")
    else if (colorIndicator < 177060) sendCustomCommand("40EB")
    else if (colorIndicator < 177080) sendCustomCommand("40EA")
    else if (colorIndicator < 177100) sendCustomCommand("40E9")
    else if (colorIndicator < 178025) sendCustomCommand("40E8")
    else if (colorIndicator < 178050) sendCustomCommand("40E7")
    else if (colorIndicator < 178075) sendCustomCommand("40E6")
    else if (colorIndicator < 178100) sendCustomCommand("40E5")
    else if (colorIndicator < 179025) sendCustomCommand("40E4")
    else if (colorIndicator < 179050) sendCustomCommand("40E3")
    else if (colorIndicator < 179075) sendCustomCommand("40E2")
    else if (colorIndicator < 179100) sendCustomCommand("40E1")
    else if (colorIndicator < 180100) sendCustomCommand("40E0")
    else if (colorIndicator < 181050) sendCustomCommand("40DF")
    else if (colorIndicator < 181100) sendCustomCommand("40DE")
    else if (colorIndicator < 182050) sendCustomCommand("40DD")
    else if (colorIndicator < 182100) sendCustomCommand("40DC")
    else if (colorIndicator < 183100) sendCustomCommand("40DB")
    else if (colorIndicator < 184050) sendCustomCommand("40DA")
    else if (colorIndicator < 184100) sendCustomCommand("40D9")
    else if (colorIndicator < 185050) sendCustomCommand("40D8")
    else if (colorIndicator < 185100) sendCustomCommand("40D7")
    else if (colorIndicator < 186100) sendCustomCommand("40D6")
    else if (colorIndicator < 187050) sendCustomCommand("40D5")
    else if (colorIndicator < 187100) sendCustomCommand("40D4")
    else if (colorIndicator < 188050) sendCustomCommand("40D3")
    else if (colorIndicator < 188100) sendCustomCommand("40D2")
    else if (colorIndicator < 189100) sendCustomCommand("40D1")
    else if (colorIndicator < 190020) sendCustomCommand("40D0")
    else if (colorIndicator < 190040) sendCustomCommand("40CF")
    else if (colorIndicator < 190060) sendCustomCommand("40CE")
    else if (colorIndicator < 190080) sendCustomCommand("40CD")
    else if (colorIndicator < 190100) sendCustomCommand("40CC")
    else if (colorIndicator < 191015) sendCustomCommand("40CB")
    else if (colorIndicator < 191030) sendCustomCommand("40CA")
    else if (colorIndicator < 191045) sendCustomCommand("40C9")
    else if (colorIndicator < 191060) sendCustomCommand("40C8")
    else if (colorIndicator < 191085) sendCustomCommand("40C7")
    else if (colorIndicator < 191100) sendCustomCommand("40C6")
    else if (colorIndicator < 192020) sendCustomCommand("40C5")
    else if (colorIndicator < 192040) sendCustomCommand("40C4")
    else if (colorIndicator < 192060) sendCustomCommand("40C3")
    else if (colorIndicator < 192080) sendCustomCommand("40C2")
    else if (colorIndicator < 192100) sendCustomCommand("40C1")
    else if (colorIndicator < 193050) sendCustomCommand("40C0")
    else if (colorIndicator < 193100) sendCustomCommand("40BF")
    else if (colorIndicator < 194050) sendCustomCommand("40BE")
    else if (colorIndicator < 194100) sendCustomCommand("40BD")
    else if (colorIndicator < 195030) sendCustomCommand("40BC")
    else if (colorIndicator < 195060) sendCustomCommand("40BB")
    else if (colorIndicator < 195100) sendCustomCommand("40BA")
    else if (colorIndicator < 196030) sendCustomCommand("40B9")
    else if (colorIndicator < 196060) sendCustomCommand("40B8")
    else if (colorIndicator < 196100) sendCustomCommand("40B7")
    else if (colorIndicator < 197050) sendCustomCommand("40B6")
    else if (colorIndicator < 197100) sendCustomCommand("40B5")
    else if (colorIndicator < 198050) sendCustomCommand("40B4")
    else if (colorIndicator < 198100) sendCustomCommand("40B3")
    else if (colorIndicator < 198030) sendCustomCommand("40B2")
    else if (colorIndicator < 199060) sendCustomCommand("40B1")
    else if (colorIndicator < 199100) sendCustomCommand("40B0")

         
         //IF WHITE CENTRE SATURATION
         if (colorIndicator == 0) wait(1) //DO NOTHING
         else if (colorIndicator < 9000) sendEvent(name: "saturation", value: 0)

}

private Integer flattenHueSat(Integer hue, Integer sat) {
    Integer flatHueSat = 0
    if (HUE_RANGE.contains(hue) && SAT_RANGE.contains(sat) ) {
        Integer scaledHue = hue * HUE_SCALE
        flatHueSat = scaledHue + sat + COLOR_OFFSET
    }
    log.debug "flattenHueSat for hue: $hue, sat: $sat comes to $flatHueSat"
    return flatHueSat
}

private Map restoreHueSat(Integer flatHueSat) {
    flatHueSat -= COLOR_OFFSET
    Integer sat = flatHueSat % HUE_SCALE
    Integer hue = flatHueSat.intdiv(HUE_SCALE)
    return [hue: hue, sat: sat]
}

/**
 * Just mark the end of the execution in the log
 */
private void done() {
    log.trace "---- DONE ----"
}

/**
 * Given a color temperature (in Kelvin), estimate an RGB equivalent
 * @method kelvinToRgb
 * @param  Integer     kelvin        white color temperature in Kelvin
 * @return String      RGB color value in hex
 */
private String kelvinToHex(Integer kelvin) {
    if (!kelvin) kelvin = COLOR_TEMP_DEFAULT
    kelvin = boundInt(kelvin, COLOR_TEMP_RANGE)

    Integer kTemp = kelvin / 100
    def r = 0
    def g = 0
    def b = 0

    // calculate red
    if (kTemp <= 66) {
        r = 255
    } else {
        r = kTemp - 60
        r = 329.698727446 * (r ** -0.1332047592)
        r = boundInt(r, colorUtil.rgbRange)
    }

    //calculate green
    if (kTemp <= 66) {
        g = kTemp
        g = 99.4708025861 * Math.log(g) - 161.1195681661
        g = boundInt(g, colorUtil.rgbRange)
    } else {
        g = kTemp - 60
        g = 288.1221695283 * (g ** -0.0755148492)
        g = boundInt(g, colorUtil.rgbRange)
    }

    // calculate blue
    if (kTemp >= 66) {
        b = 255
    } else if (kTemp <= 19) {
        b = 0
    } else {
        b = kTemp - 10
        b = 138.5177312231 * Math.log(b) - 305.0447927307
        b = boundInt(b, colorUtil.rgbRange)
    }

    return colorUtil.rgbToHex(r, g, b)
}

/**
 * Ensure an integer value is within the provided range, or set it to either extent if it is outside the range.
 * @param Number value         The integer to evaluate
 * @param IntRange theRange     The range within which the value must fall
 * @return Integer
 */
private Integer boundInt(Number value, IntRange theRange) {
    value = Math.max(theRange.getFrom(), value)
    value = Math.min(theRange.getTo(), value)
    return value.toInteger()
}

/**
 * Find periodic values in a range, allowing for inclusion of special values that do not fit the periodicity
 * @param IntRange kRange   define the range for the periodic values.
 * @param Integer kStep     the number between values, based from zero, not the lower bound of the range
 * @param List kExtras      additional values to include. The upper and lower range bounds are already included
 * @return List
 */
private List buildColorTempList(IntRange kRange, Integer kStep, List kExtras) {
    List colorTempList = [kRange.getFrom()] // start with range lower bound
    Integer kFirstNorm = kRange.getFrom() + kStep - (kRange.getFrom() % kStep) // find the first value within thr range which is a factor of kStep
    colorTempList += (kFirstNorm..kRange.getTo()).step(kStep) // now build the periodic list
    colorTempList << kRange.getTo() // include range upper bound
    colorTempList += kExtras // add in extra values
    return colorTempList.sort().unique() // sort and de-dupe
}

/**
 * given a numeric value and a list of acceptable values, return the acceptable value closest to the input value.
 * @param value                 the input value to "snap"
 * @param List validValues      a list of valid values
 * @return Number
 */
private Number snapToClosest(Number value, List validValues) {
    return validValues.sort { (it - value).abs() }.first()
}
